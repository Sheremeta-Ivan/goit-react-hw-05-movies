{"version":3,"file":"static/js/568.2d2cffc2.chunk.js","mappings":"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","sources":["components/Button/Button.jsx","pages/MoviesDetails/MoviesDetails.jsx","services/TmdbAPI.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nconst Button = ({ text }) => {\n  return <button type=\"button\">{text}</button>;\n};\n\nButton.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default Button;\n","import React, { useEffect, useRef, useState, Suspense } from 'react';\nimport { useLocation, useParams, Link, Outlet } from 'react-router-dom';\nimport { fetchMovieDetails } from 'services/TmdbAPI';\nimport Loader from 'components/Loader/Loader';\nimport Button from 'components/Button/Button';\nimport noimage from 'components/images/placeholder.png';\n\nconst MoviesDetails = () => {\n  //hooks\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState(null);\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from || '/');\n\n  //get data from api about film details\n  useEffect(() => {\n    const movieDetails = async () => {\n      try {\n        const movie = await fetchMovieDetails(movieId);\n        setMovieDetails(movie);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    movieDetails();\n  }, [movieId]);\n\n  //share loader when movieDetail null\n  if (!movieDetails) {\n    return <Loader />;\n  }\n\n  //get info about production companies current film\n  const productionCompanies = movieDetails.production_companies;\n\n  const productionCompaniesList = productionCompanies.map(\n    ({ id, logo_path, name }) =>\n      logo_path && (\n        <li key={id}>\n          {logo_path && (\n            <img\n              src={`https://image.tmdb.org/t/p/w500${logo_path}`}\n              alt={name}\n              style={{\n                maxHeight: 50,\n                maxWidth: 200,\n                marginRight: 30,\n                marginTop: 10,\n              }}\n            />\n          )}\n        </li>\n      )\n  );\n  const roundedPopularity = Math.round(movieDetails.vote_average * 10);\n\n  return (\n    <div>\n      <Link to={backLinkHref.current}>\n        <Button text=\"⬅️ Go back\" />\n      </Link>\n      <div backdrop={movieDetails.backdrop_path}>\n        {/* right side */}\n        <div>\n          <h1>{movieDetails.title}</h1>\n          <h3>User score: {roundedPopularity}%</h3>\n          <h2>Overview</h2>\n          <p>{movieDetails.overview}</p>\n          <h2>Genres</h2>\n          <p>\n            {movieDetails.genres.map(genre => (\n              <span key={genre.id}> {genre.name}</span>\n            ))}\n          </p>\n          <h2>Production companies</h2>\n          <div>{productionCompaniesList}</div>\n        </div>\n        {/* img container */}\n        <div>\n          <img\n            src={\n              movieDetails.poster_path\n                ? `https://image.tmdb.org/t/p/w500${movieDetails.poster_path}`\n                : `${noimage}`\n            }\n            alt={movieDetails.title}\n          />\n        </div>\n        <hr />\n        <h3>Additional information</h3>\n        <Link to=\"cast\">\n          <Button text=\"Cast\" />\n        </Link>\n        <Link to=\"reviews\">\n          <Button text=\"Reviews\" />\n        </Link>\n        <hr />\n        <Suspense fallback={<Loader />}>\n          <Outlet />\n        </Suspense>\n      </div>\n    </div>\n  );\n};\n\nexport default MoviesDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '1527ea54837c90bfc98da5bb8785a014';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst params = {\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n  },\n};\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(`trending/movie/day`, params);\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(`/movie/${movieId}`, params);\n  return response.data;\n};\n\nexport const handleSearch = async movieName => {\n  const response = await axios.get(`/search/movie?query=${movieName}`, params);\n  return response.data.results;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const response = await axios.get(`movie/${movieId}/credits?`, params);\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(`movie/${movieId}/reviews?`, params);\n  return response.data.results;\n};\n"],"names":["text","type","movieId","useParams","useState","movieDetails","setMovieDetails","location","useLocation","backLinkHref","useRef","state","from","useEffect","fetchMovieDetails","movie","console","error","Loader","productionCompaniesList","production_companies","map","id","logo_path","name","src","alt","style","maxHeight","maxWidth","marginRight","marginTop","roundedPopularity","Math","round","vote_average","to","current","backdrop","backdrop_path","title","overview","genres","genre","poster_path","noimage","Suspense","fallback","axios","params","api_key","language","fetchTrendingMovies","response","data","results","handleSearch","movieName","fetchMovieCast","cast","fetchMovieReviews"],"sourceRoot":""}